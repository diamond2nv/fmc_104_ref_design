/// Autogenerated DO NOT EDIT
///
/// (c) Koheron

#ifndef __OPERATIONS_HPP__
#define __OPERATIONS_HPP__

#include <././drivers/common.hpp>
#include <././device_driver.hpp>


namespace op {
namespace Common {
    constexpr uint32_t set_led = (2 << 16) + 0;
    constexpr uint32_t get_led = (2 << 16) + 1;
    constexpr uint32_t init = (2 << 16) + 2;
    constexpr uint32_t get_instrument_config = (2 << 16) + 3;
    constexpr uint32_t ip_on_leds = (2 << 16) + 4;
    }
namespace TopLevelDriver {
    constexpr uint32_t PsaFifoReset = (3 << 16) + 0;
    constexpr uint32_t PsaFifoCount = (3 << 16) + 1;
    constexpr uint32_t PsaGetFifo = (3 << 16) + 2;
    constexpr uint32_t DmaSetData = (3 << 16) + 3;
    constexpr uint32_t DmaGetData = (3 << 16) + 4;
    constexpr uint32_t DmaSetCyclic_mm2s = (3 << 16) + 5;
    constexpr uint32_t DmaSetDrescriptor_mm2s = (3 << 16) + 6;
    constexpr uint32_t DmaStart_mm2s = (3 << 16) + 7;
    constexpr uint32_t DmaStop_mm2s = (3 << 16) + 8;
    constexpr uint32_t qSpiResetFifo = (3 << 16) + 9;
    constexpr uint32_t qSpiReset = (3 << 16) + 10;
    constexpr uint32_t adcSpiInitialize = (3 << 16) + 11;
    constexpr uint32_t adcClockTreeDebug = (3 << 16) + 12;
    constexpr uint32_t qSpiWrite = (3 << 16) + 13;
    constexpr uint32_t qSpiRead = (3 << 16) + 14;
    constexpr uint32_t get_dna = (3 << 16) + 15;
    constexpr uint32_t get_fortytwo = (3 << 16) + 16;
    }

}

// Type checking
template<uint32_t id> struct arg_types;
template<uint32_t id> using arg_types_t = typename arg_types<id>::type;
 template<uint32_t id> struct ret_type;
template<uint32_t id> using ret_type_t = typename ret_type<id>::type;

template<>
    struct arg_types<op::Common::set_led> {
        using type = std::tuple<uint32_t>;
    };

    template<>
    struct ret_type<op::Common::set_led> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::Common::get_led> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::Common::get_led> {
        using type = std::decay_t<uint32_t>;
    };

    template<>
    struct arg_types<op::Common::init> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::Common::init> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::Common::get_instrument_config> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::Common::get_instrument_config> {
        using type = std::decay_t<std::string>;
    };

    template<>
    struct arg_types<op::Common::ip_on_leds> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::Common::ip_on_leds> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::TopLevelDriver::PsaFifoReset> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::TopLevelDriver::PsaFifoReset> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::TopLevelDriver::PsaFifoCount> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::TopLevelDriver::PsaFifoCount> {
        using type = std::decay_t<uint32_t>;
    };

    template<>
    struct arg_types<op::TopLevelDriver::PsaGetFifo> {
        using type = std::tuple<uint32_t>;
    };

    template<>
    struct ret_type<op::TopLevelDriver::PsaGetFifo> {
        using type = std::decay_t<decltype(std::declval<TopLevelDriver>().PsaGetFifo(std::declval<uint32_t>()))>;
    };

    template<>
    struct arg_types<op::TopLevelDriver::DmaSetData> {
        using type = std::tuple<std::vector<uint32_t>>;
    };

    template<>
    struct ret_type<op::TopLevelDriver::DmaSetData> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::TopLevelDriver::DmaGetData> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::TopLevelDriver::DmaGetData> {
        using type = std::decay_t<decltype(std::declval<TopLevelDriver>().DmaGetData())>;
    };

    template<>
    struct arg_types<op::TopLevelDriver::DmaSetCyclic_mm2s> {
        using type = std::tuple<bool>;
    };

    template<>
    struct ret_type<op::TopLevelDriver::DmaSetCyclic_mm2s> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::TopLevelDriver::DmaSetDrescriptor_mm2s> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::TopLevelDriver::DmaSetDrescriptor_mm2s> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::TopLevelDriver::DmaStart_mm2s> {
        using type = std::tuple<bool>;
    };

    template<>
    struct ret_type<op::TopLevelDriver::DmaStart_mm2s> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::TopLevelDriver::DmaStop_mm2s> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::TopLevelDriver::DmaStop_mm2s> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::TopLevelDriver::qSpiResetFifo> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::TopLevelDriver::qSpiResetFifo> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::TopLevelDriver::qSpiReset> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::TopLevelDriver::qSpiReset> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::TopLevelDriver::adcSpiInitialize> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::TopLevelDriver::adcSpiInitialize> {
        using type = std::decay_t<uint32_t>;
    };

    template<>
    struct arg_types<op::TopLevelDriver::adcClockTreeDebug> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::TopLevelDriver::adcClockTreeDebug> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::TopLevelDriver::qSpiWrite> {
        using type = std::tuple<uint8_t,uint8_t>;
    };

    template<>
    struct ret_type<op::TopLevelDriver::qSpiWrite> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::TopLevelDriver::qSpiRead> {
        using type = std::tuple<uint8_t>;
    };

    template<>
    struct ret_type<op::TopLevelDriver::qSpiRead> {
        using type = std::decay_t<uint32_t>;
    };

    template<>
    struct arg_types<op::TopLevelDriver::get_dna> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::TopLevelDriver::get_dna> {
        using type = std::decay_t<uint64_t>;
    };

    template<>
    struct arg_types<op::TopLevelDriver::get_fortytwo> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::TopLevelDriver::get_fortytwo> {
        using type = std::decay_t<uint32_t>;
    };

    

#endif // __OPERATIONS_HPP__