/// Autogenerated DO NOT EDIT
///
/// (c) Koheron

#ifndef __OPERATIONS_HPP__
#define __OPERATIONS_HPP__

#include <././drivers/common.hpp>
#include <././drivers/fifo_controller.hpp>
#include <././drivers/dma-sg_controller.hpp>
#include <././drivers/adc_qspi_controller.hpp>
#include <././device_driver.hpp>


namespace op {
namespace Common {
    constexpr uint32_t set_led = (2 << 16) + 0;
    constexpr uint32_t get_led = (2 << 16) + 1;
    constexpr uint32_t init = (2 << 16) + 2;
    constexpr uint32_t get_instrument_config = (2 << 16) + 3;
    constexpr uint32_t ip_on_leds = (2 << 16) + 4;
    }
namespace SSFifoController {
    constexpr uint32_t set_server_info = (3 << 16) + 0;
    constexpr uint32_t fifo_reset_tx = (3 << 16) + 1;
    constexpr uint32_t fifo_reset_rx = (3 << 16) + 2;
    constexpr uint32_t fifo_write_tx = (3 << 16) + 3;
    constexpr uint32_t fifo_read_rx = (3 << 16) + 4;
    constexpr uint32_t fifo_vacancy_tx = (3 << 16) + 5;
    constexpr uint32_t fifo_vacancy_rx = (3 << 16) + 6;
    constexpr uint32_t get_vector_rx = (3 << 16) + 7;
    constexpr uint32_t start_fifo_acquisition = (3 << 16) + 8;
    constexpr uint32_t stop_fifo_acquisition = (3 << 16) + 9;
    constexpr uint32_t check_fifoacq_thread = (3 << 16) + 10;
    }
namespace DmaSG {
    constexpr uint32_t set_server_info = (4 << 16) + 0;
    constexpr uint32_t set_descriptor_s2mm = (4 << 16) + 1;
    constexpr uint32_t set_descriptor_mm2s = (4 << 16) + 2;
    constexpr uint32_t start_dma_s2mm = (4 << 16) + 3;
    constexpr uint32_t stop_dma_s2mm = (4 << 16) + 4;
    constexpr uint32_t start_dma_mm2s = (4 << 16) + 5;
    constexpr uint32_t stop_dma_mm2s = (4 << 16) + 6;
    constexpr uint32_t set_mm2s_data = (4 << 16) + 7;
    constexpr uint32_t get_s2mm_data = (4 << 16) + 8;
    constexpr uint32_t start_dma_acquisition = (4 << 16) + 9;
    constexpr uint32_t stop_dma_acquisition = (4 << 16) + 10;
    constexpr uint32_t check_dmaacq_thread = (4 << 16) + 11;
    constexpr uint32_t print_dma_log = (4 << 16) + 12;
    }
namespace xQSPI {
    constexpr uint32_t set_params = (5 << 16) + 0;
    constexpr uint32_t read_spi = (5 << 16) + 1;
    constexpr uint32_t write_spi = (5 << 16) + 2;
    constexpr uint32_t sreset_spi_fifo = (5 << 16) + 3;
    constexpr uint32_t sreset_spi = (5 << 16) + 4;
    }
namespace TopLevelDriver {
    constexpr uint32_t adcSpiInitialize = (6 << 16) + 0;
    constexpr uint32_t get_dna = (6 << 16) + 1;
    constexpr uint32_t get_fortytwo = (6 << 16) + 2;
    constexpr uint32_t set_adc_delay_inc = (6 << 16) + 3;
    constexpr uint32_t set_adc_delay_dec = (6 << 16) + 4;
    constexpr uint32_t set_adc_clear_error = (6 << 16) + 5;
    constexpr uint32_t set_gpio = (6 << 16) + 6;
    }

}

// Type checking
template<uint32_t id> struct arg_types;
template<uint32_t id> using arg_types_t = typename arg_types<id>::type;
 template<uint32_t id> struct ret_type;
template<uint32_t id> using ret_type_t = typename ret_type<id>::type;

template<>
    struct arg_types<op::Common::set_led> {
        using type = std::tuple<uint32_t>;
    };

    template<>
    struct ret_type<op::Common::set_led> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::Common::get_led> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::Common::get_led> {
        using type = std::decay_t<uint32_t>;
    };

    template<>
    struct arg_types<op::Common::init> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::Common::init> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::Common::get_instrument_config> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::Common::get_instrument_config> {
        using type = std::decay_t<std::string>;
    };

    template<>
    struct arg_types<op::Common::ip_on_leds> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::Common::ip_on_leds> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::SSFifoController::set_server_info> {
        using type = std::tuple<std::string,std::string>;
    };

    template<>
    struct ret_type<op::SSFifoController::set_server_info> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::SSFifoController::fifo_reset_tx> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::SSFifoController::fifo_reset_tx> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::SSFifoController::fifo_reset_rx> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::SSFifoController::fifo_reset_rx> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::SSFifoController::fifo_write_tx> {
        using type = std::tuple<int32_t>;
    };

    template<>
    struct ret_type<op::SSFifoController::fifo_write_tx> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::SSFifoController::fifo_read_rx> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::SSFifoController::fifo_read_rx> {
        using type = std::decay_t<uint32_t>;
    };

    template<>
    struct arg_types<op::SSFifoController::fifo_vacancy_tx> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::SSFifoController::fifo_vacancy_tx> {
        using type = std::decay_t<uint32_t>;
    };

    template<>
    struct arg_types<op::SSFifoController::fifo_vacancy_rx> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::SSFifoController::fifo_vacancy_rx> {
        using type = std::decay_t<uint32_t>;
    };

    template<>
    struct arg_types<op::SSFifoController::get_vector_rx> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::SSFifoController::get_vector_rx> {
        using type = std::decay_t<decltype(std::declval<SSFifoController>().get_vector_rx())>;
    };

    template<>
    struct arg_types<op::SSFifoController::start_fifo_acquisition> {
        using type = std::tuple<bool>;
    };

    template<>
    struct ret_type<op::SSFifoController::start_fifo_acquisition> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::SSFifoController::stop_fifo_acquisition> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::SSFifoController::stop_fifo_acquisition> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::SSFifoController::check_fifoacq_thread> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::SSFifoController::check_fifoacq_thread> {
        using type = std::decay_t<uint32_t>;
    };

    template<>
    struct arg_types<op::DmaSG::set_server_info> {
        using type = std::tuple<std::string,std::string>;
    };

    template<>
    struct ret_type<op::DmaSG::set_server_info> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::DmaSG::set_descriptor_s2mm> {
        using type = std::tuple<uint32_t,uint32_t,uint32_t>;
    };

    template<>
    struct ret_type<op::DmaSG::set_descriptor_s2mm> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::DmaSG::set_descriptor_mm2s> {
        using type = std::tuple<uint32_t,uint32_t,uint32_t>;
    };

    template<>
    struct ret_type<op::DmaSG::set_descriptor_mm2s> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::DmaSG::start_dma_s2mm> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::DmaSG::start_dma_s2mm> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::DmaSG::stop_dma_s2mm> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::DmaSG::stop_dma_s2mm> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::DmaSG::start_dma_mm2s> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::DmaSG::start_dma_mm2s> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::DmaSG::stop_dma_mm2s> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::DmaSG::stop_dma_mm2s> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::DmaSG::set_mm2s_data> {
        using type = std::tuple<std::vector<uint32_t>>;
    };

    template<>
    struct ret_type<op::DmaSG::set_mm2s_data> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::DmaSG::get_s2mm_data> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::DmaSG::get_s2mm_data> {
        using type = std::decay_t<decltype(std::declval<DmaSG>().get_s2mm_data())>;
    };

    template<>
    struct arg_types<op::DmaSG::start_dma_acquisition> {
        using type = std::tuple<bool>;
    };

    template<>
    struct ret_type<op::DmaSG::start_dma_acquisition> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::DmaSG::stop_dma_acquisition> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::DmaSG::stop_dma_acquisition> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::DmaSG::check_dmaacq_thread> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::DmaSG::check_dmaacq_thread> {
        using type = std::decay_t<uint32_t>;
    };

    template<>
    struct arg_types<op::DmaSG::print_dma_log> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::DmaSG::print_dma_log> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::xQSPI::set_params> {
        using type = std::tuple<uint8_t,uint8_t,uint8_t>;
    };

    template<>
    struct ret_type<op::xQSPI::set_params> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::xQSPI::read_spi> {
        using type = std::tuple<uint16_t,bool>;
    };

    template<>
    struct ret_type<op::xQSPI::read_spi> {
        using type = std::decay_t<uint8_t>;
    };

    template<>
    struct arg_types<op::xQSPI::write_spi> {
        using type = std::tuple<uint16_t,uint8_t,bool>;
    };

    template<>
    struct ret_type<op::xQSPI::write_spi> {
        using type = std::decay_t<uint8_t>;
    };

    template<>
    struct arg_types<op::xQSPI::sreset_spi_fifo> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::xQSPI::sreset_spi_fifo> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::xQSPI::sreset_spi> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::xQSPI::sreset_spi> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::TopLevelDriver::adcSpiInitialize> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::TopLevelDriver::adcSpiInitialize> {
        using type = std::decay_t<uint32_t>;
    };

    template<>
    struct arg_types<op::TopLevelDriver::get_dna> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::TopLevelDriver::get_dna> {
        using type = std::decay_t<uint64_t>;
    };

    template<>
    struct arg_types<op::TopLevelDriver::get_fortytwo> {
        using type = std::tuple<>;
    };

    template<>
    struct ret_type<op::TopLevelDriver::get_fortytwo> {
        using type = std::decay_t<uint32_t>;
    };

    template<>
    struct arg_types<op::TopLevelDriver::set_adc_delay_inc> {
        using type = std::tuple<uint32_t>;
    };

    template<>
    struct ret_type<op::TopLevelDriver::set_adc_delay_inc> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::TopLevelDriver::set_adc_delay_dec> {
        using type = std::tuple<uint32_t>;
    };

    template<>
    struct ret_type<op::TopLevelDriver::set_adc_delay_dec> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::TopLevelDriver::set_adc_clear_error> {
        using type = std::tuple<uint32_t>;
    };

    template<>
    struct ret_type<op::TopLevelDriver::set_adc_clear_error> {
        using type = std::decay_t<void>;
    };

    template<>
    struct arg_types<op::TopLevelDriver::set_gpio> {
        using type = std::tuple<uint32_t>;
    };

    template<>
    struct ret_type<op::TopLevelDriver::set_gpio> {
        using type = std::decay_t<void>;
    };

    

#endif // __OPERATIONS_HPP__