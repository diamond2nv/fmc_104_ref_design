/// Autogenerated DO NOT EDIT
///
/// (c) Koheron

#ifndef __DRIVERS_MEMORY_HPP__
#define __DRIVERS_MEMORY_HPP__

#include <array>
#include <tuple>
#include <cstdint>

#include <zynq_fclk.hpp>

extern "C" {
  #include <sys/mman.h> // PROT_READ, PROT_WRITE
}

namespace mem {
constexpr size_t control = 0;
constexpr uintptr_t control_addr = 0x40140000;
constexpr uint32_t control_range = 4*1024;
constexpr uint32_t control_nblocks = 1;
constexpr size_t status = 1;
constexpr uintptr_t status_addr = 0x40110000;
constexpr uint32_t status_range = 4*1024;
constexpr uint32_t status_nblocks = 1;
constexpr size_t SDRAM = 2;
constexpr uintptr_t SDRAM_addr = 0x50000000;
constexpr uint32_t SDRAM_range = 64*1024;
constexpr uint32_t SDRAM_nblocks = 1;
constexpr size_t xadc = 3;
constexpr uintptr_t xadc_addr = 0x40120000;
constexpr uint32_t xadc_range = 64*1024;
constexpr uint32_t xadc_nblocks = 1;
constexpr size_t ram_mm2s = 4;
constexpr uintptr_t ram_mm2s_addr = 0x1F000000;
constexpr uint32_t ram_mm2s_range = 16*1024*1024;
constexpr uint32_t ram_mm2s_nblocks = 1;
constexpr size_t ram_s2mm = 5;
constexpr uintptr_t ram_s2mm_addr = 0x1E000000;
constexpr uint32_t ram_s2mm_range = 16*1024*1024;
constexpr uint32_t ram_s2mm_nblocks = 1;
constexpr size_t axi_hp0 = 6;
constexpr uintptr_t axi_hp0_addr = 0xF8008000;
constexpr uint32_t axi_hp0_range = 4*1024;
constexpr uint32_t axi_hp0_nblocks = 1;
constexpr size_t axi_hp2 = 7;
constexpr uintptr_t axi_hp2_addr = 0xF800A000;
constexpr uint32_t axi_hp2_range = 4*1024;
constexpr uint32_t axi_hp2_nblocks = 1;
constexpr size_t sclr = 8;
constexpr uintptr_t sclr_addr = 0xF8000000;
constexpr uint32_t sclr_range = 64*1024;
constexpr uint32_t sclr_nblocks = 1;
constexpr size_t ocm_mm2s = 9;
constexpr uintptr_t ocm_mm2s_addr = 0xFFFF0000;
constexpr uint32_t ocm_mm2s_range = 32*1024;
constexpr uint32_t ocm_mm2s_nblocks = 1;
constexpr size_t ocm_s2mm = 10;
constexpr uintptr_t ocm_s2mm_addr = 0xFFFF8000;
constexpr uint32_t ocm_s2mm_range = 32*1024;
constexpr uint32_t ocm_s2mm_nblocks = 1;
constexpr size_t adc_spi = 11;
constexpr uintptr_t adc_spi_addr = 0x40100000;
constexpr uint32_t adc_spi_range = 64*1024;
constexpr uint32_t adc_spi_nblocks = 1;
constexpr size_t pcie_bypass_0 = 12;
constexpr uintptr_t pcie_bypass_0_addr = 0x00010000;
constexpr uint32_t pcie_bypass_0_range = 32*1024;
constexpr uint32_t pcie_bypass_0_nblocks = 1;
constexpr size_t pcie_bypass_1 = 13;
constexpr uintptr_t pcie_bypass_1_addr = 0x00020000;
constexpr uint32_t pcie_bypass_1_range = 32*1024;
constexpr uint32_t pcie_bypass_1_nblocks = 1;
constexpr size_t pcie_bypass_2 = 14;
constexpr uintptr_t pcie_bypass_2_addr = 0x00030000;
constexpr uint32_t pcie_bypass_2_range = 32*1024;
constexpr uint32_t pcie_bypass_2_nblocks = 1;
constexpr size_t pcie_bypass_3 = 15;
constexpr uintptr_t pcie_bypass_3_addr = 0x00040000;
constexpr uint32_t pcie_bypass_3_range = 32*1024;
constexpr uint32_t pcie_bypass_3_nblocks = 1;
constexpr size_t pcie_xdma_0 = 16;
constexpr uintptr_t pcie_xdma_0_addr = 0x00050000;
constexpr uint32_t pcie_xdma_0_range = 32*1024;
constexpr uint32_t pcie_xdma_0_nblocks = 1;
constexpr size_t pcie_gpio = 17;
constexpr uintptr_t pcie_gpio_addr = 0x00060000;
constexpr uint32_t pcie_gpio_range = 32*1024;
constexpr uint32_t pcie_gpio_nblocks = 1;
constexpr size_t axi_fifo_mm_s = 18;
constexpr uintptr_t axi_fifo_mm_s_addr = 0x40130000;
constexpr uint32_t axi_fifo_mm_s_range = 32*1024;
constexpr uint32_t axi_fifo_mm_s_nblocks = 1;
constexpr size_t dma = 19;
constexpr uintptr_t dma_addr = 0x40400000;
constexpr uint32_t dma_range = 64*1024;
constexpr uint32_t dma_nblocks = 1;


constexpr size_t count = 20;

constexpr std::array<std::tuple<uintptr_t, uint32_t, uint32_t, uint32_t>, count> memory_array = {{
    std::make_tuple(control_addr, control_range, PROT_READ|PROT_WRITE, control_nblocks),
        std::make_tuple(status_addr, status_range, PROT_READ|PROT_WRITE, status_nblocks),
        std::make_tuple(SDRAM_addr, SDRAM_range, PROT_READ|PROT_WRITE, SDRAM_nblocks),
        std::make_tuple(xadc_addr, xadc_range, PROT_READ|PROT_WRITE, xadc_nblocks),
        std::make_tuple(ram_mm2s_addr, ram_mm2s_range, PROT_READ|PROT_WRITE, ram_mm2s_nblocks),
        std::make_tuple(ram_s2mm_addr, ram_s2mm_range, PROT_READ|PROT_WRITE, ram_s2mm_nblocks),
        std::make_tuple(axi_hp0_addr, axi_hp0_range, PROT_READ|PROT_WRITE, axi_hp0_nblocks),
        std::make_tuple(axi_hp2_addr, axi_hp2_range, PROT_READ|PROT_WRITE, axi_hp2_nblocks),
        std::make_tuple(sclr_addr, sclr_range, PROT_READ|PROT_WRITE, sclr_nblocks),
        std::make_tuple(ocm_mm2s_addr, ocm_mm2s_range, PROT_READ|PROT_WRITE, ocm_mm2s_nblocks),
        std::make_tuple(ocm_s2mm_addr, ocm_s2mm_range, PROT_READ|PROT_WRITE, ocm_s2mm_nblocks),
        std::make_tuple(adc_spi_addr, adc_spi_range, PROT_READ|PROT_WRITE, adc_spi_nblocks),
        std::make_tuple(pcie_bypass_0_addr, pcie_bypass_0_range, PROT_READ|PROT_WRITE, pcie_bypass_0_nblocks),
        std::make_tuple(pcie_bypass_1_addr, pcie_bypass_1_range, PROT_READ|PROT_WRITE, pcie_bypass_1_nblocks),
        std::make_tuple(pcie_bypass_2_addr, pcie_bypass_2_range, PROT_READ|PROT_WRITE, pcie_bypass_2_nblocks),
        std::make_tuple(pcie_bypass_3_addr, pcie_bypass_3_range, PROT_READ|PROT_WRITE, pcie_bypass_3_nblocks),
        std::make_tuple(pcie_xdma_0_addr, pcie_xdma_0_range, PROT_READ|PROT_WRITE, pcie_xdma_0_nblocks),
        std::make_tuple(pcie_gpio_addr, pcie_gpio_range, PROT_READ|PROT_WRITE, pcie_gpio_nblocks),
        std::make_tuple(axi_fifo_mm_s_addr, axi_fifo_mm_s_range, PROT_READ|PROT_WRITE, axi_fifo_mm_s_nblocks),
        std::make_tuple(dma_addr, dma_range, PROT_READ|PROT_WRITE, dma_nblocks)
        }};

} // namespace mem

namespace reg {
// -- Control offsets
constexpr uint32_t led = 0;
static_assert(led < mem::control_range, "Invalid control register offset led");
constexpr uint32_t adc_delay_inc = 4;
static_assert(adc_delay_inc < mem::control_range, "Invalid control register offset adc_delay_inc");
constexpr uint32_t adc_err_clr = 8;
static_assert(adc_err_clr < mem::control_range, "Invalid control register offset adc_err_clr");
constexpr uint32_t adc_delay_dec = 12;
static_assert(adc_delay_dec < mem::control_range, "Invalid control register offset adc_delay_dec");

// -- Status offsets
constexpr uint32_t forty_two = 8;
static_assert(forty_two < mem::status_range, "Invalid status register offset forty_two");
constexpr uint32_t dna_high = 12;
static_assert(dna_high < mem::status_range, "Invalid status register offset dna_high");
constexpr uint32_t dna_low = 16;
static_assert(dna_low < mem::status_range, "Invalid status register offset dna_low");


constexpr uint32_t dna = 0;
} // namespace reg

namespace prm {
constexpr uint32_t adc_clk = 250000000;
constexpr uint32_t channel = 4;
constexpr uint32_t fclk0 = 100000000;


} // namespace prm

namespace zynq_clocks {

inline void set_clocks(ZynqFclk& fclk) {

fclk.set("fclk0", 100000000);


}
}

// -- JSONified config
constexpr auto CFG_JSON = "{\"web\":[\"./web/index.html\",\"web/koheron.ts\",\"web/led-blinker.ts\",\"./web/app.ts\",\"web/main.css\"],\"name\":\"PE1_XZ1_7030_DMA_test\",\"parameters\":{\"adc_clk\":250000000,\"channel\":4,\"fclk0\":100000000},\"status_registers\":[\"forty_two\",\"dna_high\",\"dna_low\"],\"drivers\":[\"./drivers/common.hpp\",\"./device_driver.hpp\"],\"version\":\"0.1.1\",\"control_registers\":[\"led\",\"adc_delay_inc\",\"adc_err_clr\",\"adc_delay_dec\"],\"memory\":[{\"prot_flag\":\"PROT_READ|PROT_WRITE\",\"range\":\"4K\",\"n_blocks\":1,\"name\":\"control\",\"offset\":\"0x40140000\"},{\"prot_flag\":\"PROT_READ|PROT_WRITE\",\"range\":\"4K\",\"n_blocks\":1,\"name\":\"status\",\"offset\":\"0x40110000\"},{\"prot_flag\":\"PROT_READ|PROT_WRITE\",\"range\":\"64K\",\"n_blocks\":1,\"name\":\"SDRAM\",\"offset\":\"0x50000000\"},{\"prot_flag\":\"PROT_READ|PROT_WRITE\",\"range\":\"64K\",\"n_blocks\":1,\"name\":\"xadc\",\"offset\":\"0x40120000\"},{\"prot_flag\":\"PROT_READ|PROT_WRITE\",\"range\":\"16M\",\"n_blocks\":1,\"name\":\"ram_mm2s\",\"offset\":\"0x1F000000\"},{\"prot_flag\":\"PROT_READ|PROT_WRITE\",\"range\":\"16M\",\"n_blocks\":1,\"name\":\"ram_s2mm\",\"offset\":\"0x1E000000\"},{\"prot_flag\":\"PROT_READ|PROT_WRITE\",\"range\":\"4K\",\"n_blocks\":1,\"name\":\"axi_hp0\",\"offset\":\"0xF8008000\"},{\"prot_flag\":\"PROT_READ|PROT_WRITE\",\"range\":\"4K\",\"n_blocks\":1,\"name\":\"axi_hp2\",\"offset\":\"0xF800A000\"},{\"prot_flag\":\"PROT_READ|PROT_WRITE\",\"range\":\"64K\",\"n_blocks\":1,\"name\":\"sclr\",\"offset\":\"0xF8000000\"},{\"prot_flag\":\"PROT_READ|PROT_WRITE\",\"range\":\"32K\",\"n_blocks\":1,\"name\":\"ocm_mm2s\",\"offset\":\"0xFFFF0000\"},{\"prot_flag\":\"PROT_READ|PROT_WRITE\",\"range\":\"32K\",\"n_blocks\":1,\"name\":\"ocm_s2mm\",\"offset\":\"0xFFFF8000\"},{\"prot_flag\":\"PROT_READ|PROT_WRITE\",\"range\":\"64K\",\"n_blocks\":1,\"name\":\"adc_spi\",\"offset\":\"0x40100000\"},{\"prot_flag\":\"PROT_READ|PROT_WRITE\",\"range\":\"32K\",\"n_blocks\":1,\"name\":\"pcie_bypass_0\",\"offset\":\"0x00010000\"},{\"prot_flag\":\"PROT_READ|PROT_WRITE\",\"range\":\"32K\",\"n_blocks\":1,\"name\":\"pcie_bypass_1\",\"offset\":\"0x00020000\"},{\"prot_flag\":\"PROT_READ|PROT_WRITE\",\"range\":\"32K\",\"n_blocks\":1,\"name\":\"pcie_bypass_2\",\"offset\":\"0x00030000\"},{\"prot_flag\":\"PROT_READ|PROT_WRITE\",\"range\":\"32K\",\"n_blocks\":1,\"name\":\"pcie_bypass_3\",\"offset\":\"0x00040000\"},{\"prot_flag\":\"PROT_READ|PROT_WRITE\",\"range\":\"32K\",\"n_blocks\":1,\"name\":\"pcie_xdma_0\",\"offset\":\"0x00050000\"},{\"prot_flag\":\"PROT_READ|PROT_WRITE\",\"range\":\"32K\",\"n_blocks\":1,\"name\":\"pcie_gpio\",\"offset\":\"0x00060000\"},{\"prot_flag\":\"PROT_READ|PROT_WRITE\",\"range\":\"32K\",\"n_blocks\":1,\"name\":\"axi_fifo_mm_s\",\"offset\":\"0x40130000\"},{\"prot_flag\":\"PROT_READ|PROT_WRITE\",\"range\":\"64K\",\"n_blocks\":1,\"name\":\"dma\",\"offset\":\"0x40400000\"}]}";

#endif // __DRIVERS_MEMORY_HPP__