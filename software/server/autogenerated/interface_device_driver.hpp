/// interfacetop_level_driver.hpp
///
/// Autogenerated DO NOT EDIT
///
/// (c) Koheron

#ifndef __INTERFACETOP_LEVEL_DRIVER_HPP__
#define __INTERFACETOP_LEVEL_DRIVER_HPP__

#include <memory>
#include <mutex>

#include <driver.hpp>

#include "././device_driver.hpp"
namespace koheron {

template<>
class Driver<driver_id_of<TopLevelDriver>> : public DriverAbstract
{
  public:
    int execute(Command& cmd);
    template<int op> int execute_operation(Command& cmd);

    Driver(Server *server_, TopLevelDriver& __TopLevelDriver_)
    : DriverAbstract(driver_id_of<TopLevelDriver>, server_)
    , __TopLevelDriver(__TopLevelDriver_)
    {}

    enum Operation {
        ADCSPIINITIALIZE = 0,
        GET_DNA = 1,
        GET_FORTYTWO = 2,
        SET_ADC_DELAY_INC = 3,
        SET_ADC_DELAY_DEC = 4,
        SET_ADC_CLEAR_ERROR = 5,
        SET_GPIO = 6,
        top_level_driver_op_num
    };

    std::mutex mutex;

    TopLevelDriver& __TopLevelDriver;

struct Argument_adcSpiInitialize {} args_adcSpiInitialize;

struct Argument_get_dna {} args_get_dna;

struct Argument_get_fortytwo {} args_get_fortytwo;

struct Argument_set_adc_delay_inc {uint32_t val;
} args_set_adc_delay_inc;

struct Argument_set_adc_delay_dec {uint32_t val;
} args_set_adc_delay_dec;

struct Argument_set_adc_clear_error {uint32_t val;
} args_set_adc_clear_error;

struct Argument_set_gpio {uint32_t val;
} args_set_gpio;

}; // class Interface_Top_level_driver

} // namespace koheron

#endif //__INTERFACETOP_LEVEL_DRIVER_HPP__
