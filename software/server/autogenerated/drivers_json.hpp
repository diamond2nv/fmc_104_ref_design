/// Autogenerated DO NOT EDIT
///
/// (c) Koheron

#ifndef __DRIVERS_JSON_HPP__
#define __DRIVERS_JSON_HPP__

#include <array>
#include <sstream>
#include <string>
#include <typeinfo>
#include <cxxabi.h>

#include "././drivers/common.hpp"
#include "././device_driver.hpp"


// http://stackoverflow.com/questions/4484982/how-to-convert-typename-t-to-string-in-c
template<typename T>
inline auto get_type_str()
{
    std::string res;
    char *name = nullptr;
    int status;
    name = abi::__cxa_demangle(typeid(T).name(), nullptr, nullptr, &status);

    if (name != nullptr) {
        res = std::string(name);
    }
    else {
        res = std::string(typeid(T).name());
    }

    free(name);
    return res;
}

inline auto build_drivers_json()
{
    std::stringstream ss;
    ss << "[{\"functions\":[{\"ret_type\":\"const char *\",\"args\":[],\"name\":\"get_version\",\"id\":0},{\"ret_type\":\"std::string\",\"args\":[],\"name\":\"get_cmds\",\"id\":1}],\"class\":\"KServer\",\"id\":1},{\"functions\":[{\"ret_type\":\"void\",\"args\":[{\"type\":\"uint32_t\",\"name\":\"value\"}],\"name\":\"set_led\",\"id\":0},{\"ret_type\":\"uint32_t\",\"args\":[],\"name\":\"get_led\",\"id\":1},{\"ret_type\":\"void\",\"args\":[],\"name\":\"init\",\"id\":2},{\"ret_type\":\"std::string\",\"args\":[],\"name\":\"get_instrument_config\",\"id\":3},{\"ret_type\":\"void\",\"args\":[],\"name\":\"ip_on_leds\",\"id\":4}],\"class\":\"Common\",\"id\":2},{\"functions\":[{\"ret_type\":\"void\",\"args\":[],\"name\":\"PsaFifoReset\",\"id\":0},{\"ret_type\":\"uint32_t\",\"args\":[],\"name\":\"PsaFifoCount\",\"id\":1},{\"ret_type\":\"" << get_type_str<decltype(std::declval<TopLevelDriver>().PsaGetFifo(std::declval<uint32_t>()))>() << "\",\"args\":[{\"type\":\"uint32_t\",\"name\":\"n_samples\"}],\"name\":\"PsaGetFifo\",\"id\":2},{\"ret_type\":\"void\",\"args\":[{\"type\":\"std::vector<uint32_t>\",\"name\":\"data\"}],\"name\":\"DmaSetData\",\"id\":3},{\"ret_type\":\"" << get_type_str<decltype(std::declval<TopLevelDriver>().DmaGetData())>() << "\",\"args\":[],\"name\":\"DmaGetData\",\"id\":4},{\"ret_type\":\"void\",\"args\":[{\"type\":\"bool\",\"name\":\"enable\"}],\"name\":\"DmaSetCyclic_mm2s\",\"id\":5},{\"ret_type\":\"void\",\"args\":[],\"name\":\"DmaSetDrescriptor_mm2s\",\"id\":6},{\"ret_type\":\"void\",\"args\":[{\"type\":\"bool\",\"name\":\"debug\"}],\"name\":\"DmaStart_mm2s\",\"id\":7},{\"ret_type\":\"void\",\"args\":[],\"name\":\"DmaStop_mm2s\",\"id\":8},{\"ret_type\":\"void\",\"args\":[],\"name\":\"qSpiResetFifo\",\"id\":9},{\"ret_type\":\"void\",\"args\":[],\"name\":\"qSpiReset\",\"id\":10},{\"ret_type\":\"uint32_t\",\"args\":[],\"name\":\"adcSpiInitialize\",\"id\":11},{\"ret_type\":\"void\",\"args\":[],\"name\":\"adcClockTreeDebug\",\"id\":12},{\"ret_type\":\"void\",\"args\":[{\"type\":\"uint8_t\",\"name\":\"addr\"},{\"type\":\"uint8_t\",\"name\":\"data\"}],\"name\":\"qSpiWrite\",\"id\":13},{\"ret_type\":\"uint32_t\",\"args\":[{\"type\":\"uint8_t\",\"name\":\"addr\"}],\"name\":\"qSpiRead\",\"id\":14},{\"ret_type\":\"uint64_t\",\"args\":[],\"name\":\"get_dna\",\"id\":15},{\"ret_type\":\"uint32_t\",\"args\":[],\"name\":\"get_fortytwo\",\"id\":16}],\"class\":\"TopLevelDriver\",\"id\":3}]";
    return ss.str();
}

#endif // __DRIVERS_JSON_HPP__