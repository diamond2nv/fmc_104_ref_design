/// interfacetop_level_driver.cpp
///
/// Autogenerated DO NOT EDIT
///
/// (c) Koheron

#include "interface_device_driver.hpp"

#include <commands.hpp>
#include <session.hpp>

namespace koheron {

/////////////////////////////////////
// adcSpiInitialize

template<>
int Driver<driver_id_of<TopLevelDriver>>::
        execute_operation<Driver<driver_id_of<TopLevelDriver>>::ADCSPIINITIALIZE>(Command& cmd)
{
    (void)cmd;
    
        return cmd.session->send<6, 0>(__TopLevelDriver.adcSpiInitialize());

}

/////////////////////////////////////
// get_dna

template<>
int Driver<driver_id_of<TopLevelDriver>>::
        execute_operation<Driver<driver_id_of<TopLevelDriver>>::GET_DNA>(Command& cmd)
{
    (void)cmd;
    
        return cmd.session->send<6, 1>(__TopLevelDriver.get_dna());

}

/////////////////////////////////////
// get_fortytwo

template<>
int Driver<driver_id_of<TopLevelDriver>>::
        execute_operation<Driver<driver_id_of<TopLevelDriver>>::GET_FORTYTWO>(Command& cmd)
{
    (void)cmd;
    
        return cmd.session->send<6, 2>(__TopLevelDriver.get_fortytwo());

}

/////////////////////////////////////
// set_adc_delay_inc

template<>
int Driver<driver_id_of<TopLevelDriver>>::
        execute_operation<Driver<driver_id_of<TopLevelDriver>>::SET_ADC_DELAY_INC>(Command& cmd)
{
    (void)cmd;
        constexpr size_t req_buff_size = required_buffer_size<uint32_t>();
    static_assert(req_buff_size <= cmd.payload.size(), "Buffer size too small");


    auto args_tuple0 = cmd.session->deserialize<uint32_t>(cmd);
    if (std::get<0>(args_tuple0) < 0) {
        return -1;
    }
    args_set_adc_delay_inc.val = std::get<1>(args_tuple0);

        __TopLevelDriver.set_adc_delay_inc(args_set_adc_delay_inc.val);
    return 0;

}

/////////////////////////////////////
// set_adc_delay_dec

template<>
int Driver<driver_id_of<TopLevelDriver>>::
        execute_operation<Driver<driver_id_of<TopLevelDriver>>::SET_ADC_DELAY_DEC>(Command& cmd)
{
    (void)cmd;
        constexpr size_t req_buff_size = required_buffer_size<uint32_t>();
    static_assert(req_buff_size <= cmd.payload.size(), "Buffer size too small");


    auto args_tuple0 = cmd.session->deserialize<uint32_t>(cmd);
    if (std::get<0>(args_tuple0) < 0) {
        return -1;
    }
    args_set_adc_delay_dec.val = std::get<1>(args_tuple0);

        __TopLevelDriver.set_adc_delay_dec(args_set_adc_delay_dec.val);
    return 0;

}

/////////////////////////////////////
// set_adc_clear_error

template<>
int Driver<driver_id_of<TopLevelDriver>>::
        execute_operation<Driver<driver_id_of<TopLevelDriver>>::SET_ADC_CLEAR_ERROR>(Command& cmd)
{
    (void)cmd;
        constexpr size_t req_buff_size = required_buffer_size<uint32_t>();
    static_assert(req_buff_size <= cmd.payload.size(), "Buffer size too small");


    auto args_tuple0 = cmd.session->deserialize<uint32_t>(cmd);
    if (std::get<0>(args_tuple0) < 0) {
        return -1;
    }
    args_set_adc_clear_error.val = std::get<1>(args_tuple0);

        __TopLevelDriver.set_adc_clear_error(args_set_adc_clear_error.val);
    return 0;

}

/////////////////////////////////////
// set_gpio

template<>
int Driver<driver_id_of<TopLevelDriver>>::
        execute_operation<Driver<driver_id_of<TopLevelDriver>>::SET_GPIO>(Command& cmd)
{
    (void)cmd;
        constexpr size_t req_buff_size = required_buffer_size<uint32_t>();
    static_assert(req_buff_size <= cmd.payload.size(), "Buffer size too small");


    auto args_tuple0 = cmd.session->deserialize<uint32_t>(cmd);
    if (std::get<0>(args_tuple0) < 0) {
        return -1;
    }
    args_set_gpio.val = std::get<1>(args_tuple0);

        __TopLevelDriver.set_gpio(args_set_gpio.val);
    return 0;

}



int Driver<driver_id_of<TopLevelDriver>>::execute(Command& cmd)
{
    std::lock_guard<std::mutex> lock(mutex);

    switch(cmd.operation) {
case ADCSPIINITIALIZE: {
        return execute_operation<ADCSPIINITIALIZE>(cmd);
      }
case GET_DNA: {
        return execute_operation<GET_DNA>(cmd);
      }
case GET_FORTYTWO: {
        return execute_operation<GET_FORTYTWO>(cmd);
      }
case SET_ADC_DELAY_INC: {
        return execute_operation<SET_ADC_DELAY_INC>(cmd);
      }
case SET_ADC_DELAY_DEC: {
        return execute_operation<SET_ADC_DELAY_DEC>(cmd);
      }
case SET_ADC_CLEAR_ERROR: {
        return execute_operation<SET_ADC_CLEAR_ERROR>(cmd);
      }
case SET_GPIO: {
        return execute_operation<SET_GPIO>(cmd);
      }

      case top_level_driver_op_num:
      default:
          return -1;
    }
}

} // namespace koheron